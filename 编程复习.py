###python key things

###输入数值转换
#int(input())

###
# 输入：100 20
# 获取两个数值
###
'''
c=str(input())
m=c.find(" ")
a=int(c[0:m])
b=int(c[m+1:len(c)])
'''

###
# ord函数获取字符的ASCII码
###
char_code = ord('A')
print(char_code) ##=> 65

###
# chr函数，转换ASCII码为字符
###
print(chr(65)) ##=> 'A'
print(chr(ord('A')+2)) ##=> 'C'

###
#判断输入是数值
###
'''
a = input()
if a.isdigit():
    print("Is number")
'''

###
#库的使用
###
'''
import math ###注意数学库的使用
p=(a+b+c)/2
if a+b>c and b+c>a and c+a>b:
    s=math.sqrt(p*(p-a)*(p-b)*(p-c)) ###海伦公式，注意函数的使用
    print('%.2f'%s) ###保留到小数点后两位，会四舍五入
'''

###
#输入转换成列表方式
#空字典的初始化
#判断字典条目是否存在
#增加新的字典条目
###
'''
a=list(map(int,input().split(','))) ###输入","隔开的数值字符串，转换成列表方式。split缺省输入为空格
dic={} ###空字典的初始化
c=len(a)
m=''
for i in range(c):
    if a[i] in dic: ###判断字典条目是否存在
        dic[a[i]]+=1
    else:
        dic[a[i]]=1  ###增加新的字典条目
for j in dic:
    m+=str(j)+' '+str(dic[j])+' '
print(m[:-1]) ##最后一个不取

'''

###
## 数值更换赋值
## t1,t2=t2,t1
###
a=1
b=2
c=3
d=4
a,b,c,d = d,c,b,a
print(a,b,c,d)



###
##[-1]、[:-1]、[::-1]、[n::-1]
###
a = [1,2,3,4,5]
b = "12345"

##[-1]： 列表最后一项
print(a[-1],b[-1]) ##=> 5 5

##[:-1]： 从第一项到最后一项，原型是[n : m]，前闭后开，索引从零开始，第一个索引指定可以取到，即n可以取到，后一个索引不可取到，即m不可取到。
print(a[:-1],b[:-1]) ##=> [1,2,3,4] 1234

##::-1]： 代表从全列表倒序取，原型是[n : m : k]，代表的是从那一段开始取，隔几个取一次，k代表的是间隔，间隔可正可负，正值代表正向顺序跳取，负值代表反向跳取。
print(a[::-1],b[::-1]) ##=>[5,4,3,2,1] 54321

##[n::-1]： 同上所述，从索引n开始倒序取值：
print(a[3::-1],b[3::-1]) ##=>[4,3,2,1] 4321


'''一维数组初始化'''
a=['!']*10


'''二维数组初始化'''

a = [[0 for n in range(4)] for m in range(3)]
print(a)    ###[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
a[0][1] = 1
print(a)    ###[[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

b = [[0]*4]*3
print(b)   ###[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
b[0][1] = 1
print(b)   ###[[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]

'''
&	AND	如果两个位均为 1，则将每个位设为 1。
|	OR	如果两位中的一位为 1，则将每个位设为 1。
^	XOR	如果两个位中只有一位为 1，则将每个位设为 1。
~	NOT	反转所有位。
<<	Zero fill left shift	通过从右侧推入零来向左移动，推掉最左边的位。
>>	Signed right shift	通过从左侧推入最左边的位的副本向右移动，推掉最右边的位。
//	地板除（取整除）	x // y
'''